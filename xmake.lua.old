-- Project name and language.
set_project("CollegeHRM")
set_languages("cxx20")

-- Basic rules, including generating `compile_command.json` automatically.
add_rules("mode.debug", "mode.release")
add_rules("plugin.compile_commands.autoupdate", {outputdir = '.vscode'})
set_config("buildir", "build")
set_config("export_compile_commands", true)

-- The output dir of the compiled modules.
local module_output_dir = "$(buildir)/$(os)/$(arch)/$(mode)/modules"

-- Define a rule to ensure modules are compiled and put into right
-- directories.
-- Due to a bug that modules cannot be found, I have to comment the function

rule("cpp20module")
    set_extensions(".ixx")
    on_build_file(function (target, sourcefile)
        -- Deal with dependency info and compiler operations.
        import("core.project.depend")
        import("core.tool.compiler")
        -- Load the dependency info into `dependinfo`.
        local dependinfo = depend.load(target, sourcefile, {include = true})
        local compinst = compiler.load("cxx", {target = target})
        local objectfile = path.join(
            target:autogendir(),
            "rules",
            "modules",
            path.basename(sourcefile) .. ".obj"
        )
        local ifcfile = path.join(
            target:autogendir(),
            "rules",
            "modules",
            path.basename(sourcefile) .. ".ifc"
        )
        depend.save(target, objectfile, dependinfo)
        os.vexecv(compinst:compcmd({
            sourcefile, "/Fo" .. objectfile,
            "/interface",
            "/ifcOutput " .. ifcfile, "/c"
        }))
    end)

-- The progress of the compiling of the backend.
-- The most complex thing is to let C++ (language server specificially)
-- find the compiled module. We have to do a bit of work on it.
target("backend")
    set_kind("static")
    add_files("src/lib/*.ixx", {rules = "cpp20module"})
    add_includedirs(module_output_dir)
    add_rpathdirs(module_output_dir)
    add_cxxflags("/reference employee=$(module_output_dir)/employee.ifc")
    add_cxxflags("/reference employees=$(module_output_dir)/employees.ifc")

-- The main progress.
target("CollegeHRM")
    add_rules("qt.quickapp")
    add_files("src/*.cpp")
    add_files("src/qml.qrc")

    add_deps("backend")

    add_includedirs(module_output_dir)
    add_rpathdirs(module_output_dir)